pragma solidity 0.7.4;
pragma experimental ABIEncoderV2;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";
import "../../interfaces/ICErc20.sol";
import "../../interfaces/IVault.sol";
import "../../interfaces/ILendingPool.sol";
import "../../interfaces/IPolyVaultRegistry.sol";
import {LaunchLogger} from "../launch/LaunchLogger.sol";
import "../system/PolylaunchConstants.sol";

/**
 * @title PolyVault associated with a particular Polylaunch contract,
 *        logic for interacting with interest bearing protocols is handled here.
 * @author Polylaunch Protocol
 */

contract PolyVault{
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    // the id of the current vault selected by the launcher
    // (refer to VaultRegistry to view the information for the vault id)
    uint256 public selectedVaultId;

    // the id of the current vault provider selected by the launcher
    uint256 public selectedVaultProvider;

    // whether the vault has been activated by the launcher
    bool public activated;

    // the last time the launcher tapped from the vault.
    uint256 public lastWithdrawn;

    // the remaining balance in stable available to the launcher
    uint256 public remainingBalance;

    /**
     * @notice modifier to check that configured launch is making a call
     */
    modifier onlySelf() {
        require(
            msg.sender == address(this),
            "Caller must be Launch"
        );
        _;
    }
    /**
     * @notice deposit function to place funds into a vault/pool
     * @param _vaultRegistry the address of the registry that the PolyVault will get information from
     * @param _vaultId the unique identifier of the vault the launcher would like to deposit funds to
     * @param _startingBalance the balance being deposited into the PolyVault
     * @param _stable the IERC20 interface of the stablecoin being used
     * @dev only callable from the launch contract
     */
    function _deposit(
        address _vaultRegistry,
        uint256 _vaultId,
        uint256 _startingBalance,
        IERC20 _stable,
        address _system
    ) external onlySelf {revert();}

    /**
     * @notice exit from the PolyVault and remove funds from any interest bearing protocols
     * @param _vaultRegistry the address of the registry that the PolyVault will get information from
     * @param _stable the IERC20 interface of the stablecoin being used
     * @param _system the address of the factory that will receive a portion of the interest generated by the funds
     * @dev only callable from the launch contract
     */
    function _exitFromVault(
        address _vaultRegistry,
        IERC20 _stable,
        address _system
    ) external onlySelf {revert();}

    /**
     * @notice function to allow a launcher to tap their funds from the vault
     * @param _vaultRegistry the address of the registry that the PolyVault will get information from
     * @param _stableTapRate the wei/sec value that will be used to calculate the tappable funds.
     * @param _stable the IERC20 interface of the stablecoin being used
     * @param _fundRecipient the address to send the tapped funds to
     * @dev only callable from the launch contract
     */
    function _launcherYieldTap(
        address _vaultRegistry,
        uint256 _stableTapRate,
        IERC20 _stable,
        address _fundRecipient,
        address _system
    ) external onlySelf {revert();}

}
